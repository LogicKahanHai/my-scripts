#!/bin/zsh

CONFIG_FILE="deploy_config.json"
SSH_TIMEOUT=10  # SSH connection timeout in seconds
source ~/.zshrc

# Function to display a styled message
display_message() {
  gum style --border normal --margin "1" --padding "1 2" --border-foreground 212 "$1"
}

# Function to confirm the project root if 'local_root' is not in config
confirm_project_root() {
  if [ -f "$CONFIG_FILE" ]; then
    local_root=$(jq -r 'if has("local_root") then .local_root else empty end' "$CONFIG_FILE")
  fi

  if [ -z "$local_root" ]; then
    if gum confirm "Is this the root of your project?"; then
      local_root=$(pwd)
      if [ -f "$CONFIG_FILE" ]; then
        jq --arg local_root "$local_root" '. + {local_root: $local_root}' "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
      else
        echo "{\"local_root\": \"$local_root\"}" > "$CONFIG_FILE"
      fi
    else
      gum style --foreground 9 "Error: Please run this script from the project's root directory."
      exit 1
    fi
  fi
}


rewrite_config() {
  # Prompt for configuration details
  hostname=$(gum input --placeholder "Enter Raspberry Pi hostname:")
  username=$(gum input --placeholder "Enter SSH username:")
  destination=$(gum input --placeholder "Enter destination folder on Raspberry Pi:")
  build_command=$(gum input --placeholder "Enter the build command:")
  build_output=$(gum input --placeholder "Enter the build output directory:")

  # Save configuration to JSON file
  jq --arg hostname "$hostname" \
     --arg username "$username" \
     --arg destination "$destination" \
     --arg build_command "$build_command" \
     --arg build_output "$build_output" \
     '.hostname = $hostname | .username = $username | .destination = $destination | .build_command = $build_command | .build_output = $build_output' \
     "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
}


# Function to prompt for configuration details
prompt_for_config() {
  # Check if the configuration file exists
  if [ -f $CONFIG_FILE ]; then
    # Load existing configuration
    hostname=$(jq -r '.hostname // empty' $CONFIG_FILE)
    username=$(jq -r '.username // empty' $CONFIG_FILE)
    destination=$(jq -r '.destination // empty' $CONFIG_FILE)
    build_command=$(jq -r '.build_command // empty' $CONFIG_FILE)
    build_output=$(jq -r '.build_output // empty' $CONFIG_FILE)
  fi

  # Prompt for missing configuration details
  [[ -z "$hostname" ]] && hostname=$(gum input --placeholder "Enter Raspberry Pi hostname:")
  [[ -z "$username" ]] && username=$(gum input --placeholder "Enter SSH username:")
  [[ -z "$destination" ]] && destination=$(gum input --placeholder "Enter destination folder on Raspberry Pi:")
  [[ -z "$build_command" ]] && build_command=$(gum input --placeholder "Enter the build command:")
  [[ -z "$build_output" ]] && build_output=$(gum input --placeholder "Enter the build output directory:")

  # Save configuration to JSON file
  jq --arg hostname "$hostname" \
     --arg username "$username" \
     --arg destination "$destination" \
     --arg build_command "$build_command" \
     --arg build_output "$build_output" \
     '.hostname = $hostname | .username = $username | .destination = $destination | .build_command = $build_command | .build_output = $build_output' \
     "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
}

# Function to load configuration
load_config() {
  if [ -f $CONFIG_FILE ]; then
    hostname=$(jq -r '.hostname' $CONFIG_FILE)
    username=$(jq -r '.username' $CONFIG_FILE)
    destination=$(jq -r '.destination' $CONFIG_FILE)
    build_command=$(jq -r '.build_command' $CONFIG_FILE)
    build_output=$(jq -r '.build_output' $CONFIG_FILE)
    local_root=$(jq -r '.local_root' $CONFIG_FILE)
  else
    prompt_for_config
  fi
}

# Function to execute the build command
execute_build() {
  display_message "Executing build command: $build_command"
  # gum spin --title "Building project..." -- $build_command
  eval $build_command
  if [ $? -ne 0 ]; then
    display_message "Build failed. Aborting deployment. $?"
    exit 1
  fi
}

copy_env() {
  local build_output_path="$local_root/$build_output"
  if gum confirm "Copy environment files to $build_output_path?"; then
    local env_file=$(gum input --placeholder "Enter the environment file path after $local_root:")
    local env_path="$local_root/$env_file"

    if [ -f "$env_path" ]; then
      display_message "Copying environment file to $build_output_path"
      gum spin --title "Copying environment file..." -- cp $env_path $build_output_path
      if [ $? -ne 0 ]; then
        display_message "Failed to copy environment file. Aborting deployment."
        exit 1
      fi
    else
      display_message "No environment file found in the project root."
    fi
  else
      display_message "Not copying environment file."
  fi
}


# Function to deploy build output
deploy_build() {
  display_message "Deploying build output to $username@$hostname:$destination"

  # Check if the destination directory exists on the remote server
  gum spin --title "Checking if destination directory exists..." -- ssh -o ConnectTimeout=$SSH_TIMEOUT "$username@$hostname" "[ ! -d '$destination' ]"
  if [ $? -eq 0 ]; then
    # Notify the user and ask if they want to create it
    if gum confirm "The destination folder '$destination' does not exist on the remote server. Do you want to create it?"; then
      # Attempt to create the directory
      gum spin --title "Creating destination directory..." -- ssh -o ConnectTimeout=$SSH_TIMEOUT "$username@$hostname" "mkdir -p '$destination'"
      if [ $? -eq 0 ]; then
        display_message "Successfully created the directory '$destination' on the remote server."
      else
        display_message "Failed to create the directory '$destination' on the remote server."
        exit 1
      fi
    else
      display_message "Deployment aborted by the user."
      exit 1
    fi
  fi

  # Proceed with rsync to deploy the build output
  gum spin --title "Deploying build output..." -- rsync -avz --delete "$local_root/$build_output/" "$username@$hostname:$destination"
  if [ $? -eq 0 ]; then
    display_message "Deployment successful."
  else
    display_message "Deployment failed."
    exit 1
  fi
}

# Function to set up SSH key-based authentication
setup_ssh_key_auth() {
    # Check if SSH keys already exist
    if [ ! -f ~/.ssh/id_rsa ]; then
    display_message "Generating SSH key pair..."
    gum spin --title "Generating SSH key pair..." -- ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa
    fi

    # Copy the public key to the remote server
    display_message "Copying public key to $username@$hostname..."
    gum spin --title "Copying public key to remote server..." -- ssh-copy-id -o ConnectTimeout=$SSH_TIMEOUT "$username@$hostname"

    # Test the SSH connection
    display_message "Testing passwordless SSH connection..."
    gum spin --title "Testing SSH connection..." -- ssh -o PasswordAuthentication=no -o ConnectTimeout=$SSH_TIMEOUT "$username@$hostname" "echo 'SSH connection successful'"
    if [ $? -eq 0 ]; then
        display_message "Passwordless SSH setup completed successfully."
    else
        display_message "Passwordless SSH setup failed. Please check your configuration."
        exit 1
    fi
}

  # Function to check if SSH requires a password
check_ssh_password_prompt() {
    # Attempt to SSH with a command that exits immediately
    ssh -o BatchMode=yes -o ConnectTimeout=$SSH_TIMEOUT "$username@$hostname" "exit" 2>ssh_error.log
    ssh_exit_code=$?

    # Check for hostname resolution error
    if grep -q "Could not resolve hostname" ssh_error.log; then
        display_message "Error: Could not resolve hostname '$hostname'."
        if gum confirm "Do you want to update the server details?"; then
            rewrite_config
            check_ssh_password_prompt  # Retry with updated details
        else
            display_message "Exiting the program."
            exit 1
        fi
    elif [ $ssh_exit_code -ne 0 ]; then
        if gum confirm "SSH to $username@$hostname requires a password. Do you want to set up passwordless SSH access?"; then
            setup_ssh_key_auth
        else
            display_message "Proceeding without setting up passwordless SSH access."
        fi
    else
        display_message "Passwordless SSH access is already configured."
    fi

    # Clean up
    rm -f ssh_error.log
}

  # Main script execution
  load_config
  confirm_project_root
  prompt_for_config
  check_ssh_password_prompt
  execute_build
  copy_env
  deploy_build
